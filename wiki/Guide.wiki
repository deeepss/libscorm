#summary How to use LibSCORM 2.7
#labels Featured

It is possible to pick and choose parts of the library. Section 1 below contains several standalone examples using functionality from `library/core`. If you don't want custom control, skip to section 2 where you will learn how to use the SCORM content template to create basic SCOs.

<wiki:toc max_depth="2" />

= 1 Starting from Scratch =

This section illustrates how to use each core class individually. Let's start with the simplest example: discovering the learner's name and displaying a greeting.

== 1.1 Example: Hello, world ==

Every SCO requires the files `LMS.js` and `LibScormException.js`; these
files are located in `library/core` and suffice to connect to SCORM.

Hello, world! (Actually, hello <learner name>)

{{{
<html>
<head>
	<script language="JavaScript" type="text/javascript"
		src="LibScormException.js"> </script>
	<script language="JavaScript"
		type="text/javascript" src="LMS.js"> </script>
	<script language="JavaScript" type="text/javascript">
	var lms = null;

	function load() {
		try {
			lms = new LMS(window);
			document.getElementById("message").innerHTML =
				"Hello, " + lms.GetValue("cmi.learner_name");
		} catch(e) {
			alert(e.toString());
		}
	} function unload() {
		if(lms) lms.Terminate();
	}
	</script>
</head>
<body onload='load()' onunload='unload()'>
	<p id="message">Not connected to LMS</p>
</body>
</html>
}}}

== 1.2 LMS Class Methods ==

Constructor(window)
	Scans window's parents for SCORM API.
Terminate()
	Ensure your SCO calls this method before exit.
!IsTerminated()
	Boolean.
!GetValue(name), 
!SetValue(name, value)
	'name' is an element of the CMI data model. 
Commit()
	Alerts the LMS that the data sent by !SetValues should be
	committed to persistent storage. Some LMSes use this as a cue
	to update the course table of contents or other sequencing
	interface elements.
!StartSessionTimer(), 
!PauseSessionTimer(), 
!RecordSessionTime()
	Writes the value of the Session Timer stopwatch to
	cmi.session_time.
!GetLastError()
	Returns SCORM error code of last error, or 0.
	Discouraged. Rely on exception handling in JavaScript
	SCOs. This method is included only for Flash SCOs (which
	can't catch exceptions).
!GetDiagnostic()
	Returns explanation for last error. Discouraged. 
!GetErrorString()
	Discouraged.

== 1.3 Example: Objectives and Interactions ==

They are both instances of "CMI Bags" -- CMI collections with no specified
order, and are manipulated similarly in LibSCORM. The library caches bag
values, so repeated access will not result in slow duplicate LMS calls.

Setting objective score and success status

{{{
<html>
<head>
	<script language="JavaScript" type="text/javascript"
		src="LibScormException.js"> </script>
	<script language="JavaScript"
		type="text/javascript" src="LMS.js"> </script>
	<script language="JavaScript"
		type="text/javascript" src="CMIBag.js"> </script>
	<script language="JavaScript" type="text/javascript">
	var lms = null;
	var obj = null;

	function load() {
		try {
			lms = new LMS(window);
			obj = new CMIBag(lms, "objectives");
		} catch(e) {
			alert(e.toString());
		}
	} function unload() {
		if(lms) {
			// Set primary objective
			lms.SetValue('cmi.score.scaled', '1');
			lms.SetValue('cmi.success_status', 'passed');
			// Set secondary
			obj.SetValue('secondary_name', 
			               'success_status', 'failed');
			obj.SetValue('secondary_name', 
			               'score.scaled', '0.25');
			lms.Terminate();
		}
	}
	</script>
</head>
<body onload='load()' onunload='unload()'>
	<p>This SCO is successful but secondary objective
	   'secondary_name' is not.
	</p>
</body>
</html>
}}}

== 1.4 CMIBag Class Methods ==

Constructor(lms, bagname)
	'bagname' is a CMI element e.g. 'objectives'
	or 'interactions', or a sub-bag such as
	'interactions.n.objectives'.
!GetValue(id, elem)
	'elem' is e.g. 'success_status'.
!SetValue(id, elem, val)
	Creates ID if necessary.
!GetElementList()
	Returns array of existing IDs.
!GetIndex(id)
	Indices may change without warning between learner
	sessions. Returns -1 if ID does not yet exist.

== 1.5 Example: Inter-SCO Sequencing ==

Although performing such sequencing requests is a matter of a few
SCORM API calls, doing so is tricky because it will terminate the
SCO. Some parts of your code may not know others' pre-termination cleanup
requirements, hence shouldn't terminate the SCO indiscriminately. Using
the `InterScoSeq` class, you can establish an event handler to be called
before termination.

Be careful not to call `Terminate()` more than once. The following
example checks `IsTerminated()` to avoid duplicating termination invoked
by inter-sco sequencing. The example will do nothing interesting outside
of a content package.

{{{
<html>
<head>
	<script language="JavaScript" type="text/javascript"
		src="LibScormException.js"> </script>
	<script language="JavaScript"
		type="text/javascript" src="LMS.js"> </script>
	<script language="JavaScript"
		type="text/javascript" src="InterScoSeq.js"> </script>
	<script language="JavaScript" type="text/javascript">
	var lms = null;
	var iss = null;

	function load() {
		try {
			lms = new LMS(window);
			iss = new InterScoSeq(lms, function(){});
			if(iss.CanExitForward()) {
				document.getElementById("btnNext").disabled = false;
			}
			if(iss.CanExitBackward()) {
				document.getElementById("btnPrev").disabled = false;
			}
		} catch(e) {
			alert(e.toString());
		}
	}
	function unload() {
		if(lms && !lms.IsTerminated()) {
			lms.Terminate();
		}
	}
	</script>
</head>
<body onload='load()' onunload='unload()'>
	<input type="button" id="btnPrev" value="Previous SCO"
		disabled="true" onclick="iss.ExitBackward();" />
	<input type="button" id="btnNext" value="Next SCO"
		disabled="true" onclick="iss.ExitForward();" />
</body>
</html>
}}}

== 1.6 !InterScoSeq Class Methods ==

Constructor(lms, onBeforeTerminate)
	The second argument is a function. 
!CanExitForward()
!CanExitBackward()
!CanExitChoice(target)
	Boolean.
!ExitForward()
!ExitBackward()
	The SCO will terminate.
!ExitChoice(target)
	Available 'targets' are defined in content package sequencing.
!ExitAll()
	As described in SCORM docs.


= 2 Making an HTML or Flash SCO with the template =